{"remainingRequest":"/home/knr/Documents/InteractQuickFill/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/knr/Documents/InteractQuickFill/frontend/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/knr/Documents/InteractQuickFill/frontend/src/App.vue","mtime":1633462194000},{"path":"/home/knr/Documents/InteractQuickFill/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/knr/Documents/InteractQuickFill/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/knr/Documents/InteractQuickFill/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/knr/Documents/InteractQuickFill/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/knr/Documents/InteractQuickFill/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4uL25vZGVfbW9kdWxlcy9Ac3luY2Z1c2lvbi9lajItdnVlLXNwcmVhZHNoZWV0L3N0eWxlcy9tYXRlcmlhbC5jc3MiOwpAaW1wb3J0ICcuLi9ub2RlX21vZHVsZXMvQHN5bmNmdXNpb24vZWoyLWJhc2Uvc3R5bGVzL21hdGVyaWFsLmNzcyc7ICAKQGltcG9ydCAnLi4vbm9kZV9tb2R1bGVzL0BzeW5jZnVzaW9uL2VqMi1idXR0b25zL3N0eWxlcy9tYXRlcmlhbC5jc3MnOwpAaW1wb3J0ICcuLi9ub2RlX21vZHVsZXMvQHN5bmNmdXNpb24vZWoyLWNhbGVuZGFycy9zdHlsZXMvbWF0ZXJpYWwuY3NzJzsgICAgCkBpbXBvcnQgJy4uL25vZGVfbW9kdWxlcy9Ac3luY2Z1c2lvbi9lajItZHJvcGRvd25zL3N0eWxlcy9tYXRlcmlhbC5jc3MnOyAgCkBpbXBvcnQgJy4uL25vZGVfbW9kdWxlcy9Ac3luY2Z1c2lvbi9lajItaW5wdXRzL3N0eWxlcy9tYXRlcmlhbC5jc3MnOyAgCkBpbXBvcnQgJy4uL25vZGVfbW9kdWxlcy9Ac3luY2Z1c2lvbi9lajItbmF2aWdhdGlvbnMvc3R5bGVzL21hdGVyaWFsLmNzcyc7CkBpbXBvcnQgJy4uL25vZGVfbW9kdWxlcy9Ac3luY2Z1c2lvbi9lajItcG9wdXBzL3N0eWxlcy9tYXRlcmlhbC5jc3MnOwpAaW1wb3J0ICcuLi9ub2RlX21vZHVsZXMvQHN5bmNmdXNpb24vZWoyLXNwbGl0YnV0dG9ucy9zdHlsZXMvbWF0ZXJpYWwuY3NzJzsKQGltcG9ydCAnLi4vbm9kZV9tb2R1bGVzL0BzeW5jZnVzaW9uL2VqMi1ncmlkcy9zdHlsZXMvbWF0ZXJpYWwuY3NzJzsKQGltcG9ydCAiLi4vbm9kZV9tb2R1bGVzL0BzeW5jZnVzaW9uL2VqMi1zcHJlYWRzaGVldC9zdHlsZXMvbWF0ZXJpYWwuY3NzIjsKQGltcG9ydCAiLi4vbm9kZV9tb2R1bGVzL3N3ZWV0YWxlcnQyL2Rpc3Qvc3dlZXRhbGVydDIubWluLmNzcyI7CkBpbXBvcnQgIi4uL25vZGVfbW9kdWxlcy9Ac3luY2Z1c2lvbi9lajItdnVlLWdyaWRzL3N0eWxlcy9tYXRlcmlhbC5jc3MiOwo="},{"version":3,"sources":["App.vue"],"names":[],"mappingswjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"gridElement\" height='270px'  style=\"display:none;\">\n      <strong><u>Contruction des blocs</u></strong> \n        <div>\n              <ul>\n                  <li v-for=\"bloc in ListeOfBlocs\" :key=\"bloc.message\">\n                    {{ bloc.message }} <!-- Gestion du menu contextuelle dans la grille -->\n                  </li>\n              </ul>\n            </div>\n                  <button @click=\"SendDataQuickFill\">Envoyer</button>\n                  <button @click=\"BackTosheat\">Retour</button>\n            <div>\n        </div>\n\n      <hr>\n\n      <ejs-grid ref='grid' id='gridcomp' :allowSelection='true' :allowPaging='true' height='100%' :contextMenuItems='contextMenuItems' :contextMenuOpen='contextMenuOpen' :contextMenuClick='contextMenuClick'> </ejs-grid>\n    </div>\n    \n    <div id=\"spreedsheetcomponent\">\n\n\n      <ejs-spreadsheet ref=\"spreadsheet\" :created=\"created\" :openUrl=\"openUrl\" :saveUrl=\"saveUrl\"  :allowHyperlink=\"false\" :allowImage=\"false\" :allowSorting=\"false\" :allowFiltering=\"false\" :contextMenuBeforeOpen=\"contextMenuBeforeOpen\">\n      </ejs-spreadsheet>\n\n    </div>\n\n\n\n      <div id=\"resultatcomponent\"> <!-- Affichage des programmes -->\n              <hr>\n              <strong><u>Liste des programmes</u></strong>\n              \n              <div>\n                    <p> nombre de programme est de : <span v-for=\"item in lenofprogrammes.slice(0, 1)\" :key=\"item.valuse\"> {{ item.valuse }} </span> , le programme choisi est à  la position numéro : <span v-for=\"item in idporgramme.slice(0, 1)\" :key=\"item.valuse\"> {{ item.valuse }} </span>  </p>\n                  </div>\n                        <button @click=\"VueProgramChoix\">Programme executé</button>\n                  <div>\n              </div> \n            <ejs-grid ref='grid2' id='gridcomprresult' :allowSelection='true' :allowPaging='true'  :row-data-bound='rowDataBound' :rowSelected='rowSelected' height='100%'>\n            </ejs-grid>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\n  import Vue from \"vue\";\n  import { SpreadsheetPlugin,getRangeAddress} from \"@syncfusion/ej2-vue-spreadsheet\";\n  import { GridPlugin, ContextMenu, Page } from '@syncfusion/ej2-vue-grids';\n  import axios from \"axios\";\n  import VueSweetalert2 from 'vue-sweetalert2';\n\n\n\n\n\n  Vue.use(SpreadsheetPlugin); \n  Vue.use(VueSweetalert2); /* pour la gestion des modals */\n  Vue.use(GridPlugin);\n\n\n\n\n\n  export default{\n    name: 'App',\n    data :  function(){  /* la fonction data retourne les variables dynamique (variables reactives) */\n        return {\n\n\n              idporgramme : [\n\n              ], /* Le numero de programme choisi. */\n\n              lenofprogrammes : [\n\n              ], /* Nombre de programmes obtenues apres execution de flashfill ou quickfill */\n\n              ElementToUpdate : 0,  /* variable de comptage des blocs: bvloc b1, b2 ..... */\n\n              listeElementToupdate:[\n\n\n              ], /* liste des evolution des id des blocs*/\n\n              ChoiseQuickFill : {\n                choix : 1\n              }, /*permet de determiner quel variante de QuickFill utilisé */\n\n              idsortieselectionner :{\n                  id:1\n              }, /* Identifier l'exemple sur lequel on cree le bloc*/\n\n              IndiceColoneSortie:{\n                  id:1\n              },/*Contient le numero de la colone de sortie*/\n\n              idColoneUtiliser:{\n\n                id:0\n              },/* Contient id de la colonne courrente */\n\n              ListeDesProgrammesRetourner : [\n\n              ], /* Contient la liste de programmes retourner par flashfill ou quickfilll */\n\n\n              ListeElementsEnvoyerQuickFill:[\n\n\n\n              ],  /* tableau contenant les donées (bloc de sortie + correspondance) à envoyer à QuickFill */\n\n\n              ListeDesSortiesQuickFill:[\n\n\n\n              ], /*Liste de toutes les sorties à envoyer à Quick Fill*/\n\n              LesEntreeQuickFill :\n              [\n\n\n              ], /* tableau qui stocke les chaines d'entrée sigma de quickfill */\n              \n\n              ListeOfBlocs: \n              [\n\n\n              ], /* contient les blocs de la chaine de sortie */\n\n\n              contextMenuItems: \n              [\n                  \n                  {text: 'Make a bloc', target: '.e-content', id: 'makeblock'},\n                  {text: 'Make a constant', target: '.e-content', id: 'makeconst'},\n        \n              ], /* Contient les items du menu contextuel de lq grid */\n\n\n              ListeOfIdOfCotextMenu:\n              [\n\n              ], /* Contient les ids des nouveau items du menu contextuel crée par utilisation des item \"make a bloc\", \"make a constant\" */\n\n\n\n              ListeMessagesOfCotextMenu:\n              [\n\n              ], /* Contient les messages des nouveau items du menu contextuel crée par utilisation des item \"make a bloc\", \"make a constant\" */\n\n\n              listeSorties : \n              [\n\n\n              ], /* tableau contenant les chaines de sorties s */\n\n              listeEntres:\n              [\n\n\n              ], /* tableau contenant les chaines d'entrée sigma pour flashFill */\n\n              IndiceDeLaColonneDeSortie:\n              {\n\n                id:1\n              }, /* Contient indice de la colonne de sortie */\n\n              openUrl: 'https://ej2services.syncfusion.com/production/web-services/api/spreadsheet/open',\n              saveUrl: 'https://ej2services.syncfusion.com/production/web-services/api/spreadsheet/save',\n              \n          \n          };\n\n    },\n\n    methods: \n    {\n\n\n      contextMenuOpen:function (args) \n      {\n\n        var grid = document.getElementsByClassName(\"e-grid\")[0].ej2_instances[0];\n        var that =  this;\n        var numeroIdColonne =  args.rowInfo.cellIndex;\n        var numeroDeLigne = args.rowInfo.rowIndex;\n\n\n        Vue.set(that.idColoneUtiliser,'id',numeroIdColonne);\n        Vue.set(that.idsortieselectionner,'id', numeroDeLigne);\n\n\n\n            if(numeroIdColonne == that.IndiceColoneSortie.id)\n            {\n\n                grid.contextMenuModule.contextMenu.showItems(['Make a bloc']);\n                grid.contextMenuModule.contextMenu.showItems(['Make a constant']);\n\n                if(that.ListeMessagesOfCotextMenu.length > 0)\n                {\n                        that.ListeMessagesOfCotextMenu.forEach(function (item) {\n                            if((item.text != 'Make a bloc') && (item.text != 'Make a constant'))\n                            {\n                              grid.contextMenuModule.contextMenu.hideItems([item.text]);\n\n                            }\n\n                      });\n                  }\n\n\n            }\n            else\n            {\n              grid.contextMenuModule.contextMenu.hideItems(['Make a bloc']);\n              grid.contextMenuModule.contextMenu.hideItems(['Make a constant']);\n\n              if(that.ListeMessagesOfCotextMenu.length > 0)\n              {\n\n                  that.ListeMessagesOfCotextMenu.forEach(function (item) {\n                            if((item.text != 'Make a bloc') && (item.text != 'Make a constant') && (numeroDeLigne == item.idligne))\n                            {\n\n                              grid.contextMenuModule.contextMenu.showItems([item.text]);\n\n                            }\n                            else\n                            {\n                              grid.contextMenuModule.contextMenu.hideItems([item.text]);\n                            }\n\n                  });\n\n\n              }\n\n\n\n            }\n          \n      },\n\n\n        rowSelected : function(args)\n        {\n          /* Gestion et affichage du programme choisi en interface. */\n                var that = this;\n                var index = args.data.ID;\n                Vue.swal.fire({\n                      title: '<strong><u>Programme ayant ID ' + index + '</u></strong>',\n                      icon: 'info',\n                      width: 400,\n                      html:\n                      '<p>' + that.ListeDesProgrammesRetourner[index] +'</p>' ,\n\n                      showCloseButton: true,\n                      showCancelButton: true,\n                      focusConfirm: false,\n                      confirmButtonText:\n                      '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                });\n\n        },\n\n\n\n\n        BackTosheat: function()\n        {\n\n            /*gestion du button retour */\n            var that = this; \n\n            var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n            spreedsheetcomponent.style.display = \"block\";\n\n\n            var gridElement = document.getElementById(\"gridElement\");\n            gridElement.style.display = \"none\"; \n\n\n            Object.assign(that.$data, that.$options.data());\n\n\n\n        },\n\n        VueProgramChoix: function() \n        {    \n                /*Affichage du programme executé*/\n                var that = this;\n                var index = that.idporgramme.slice(0, 1);\n                Vue.swal.fire({\n                      title: '<strong><u>Programme executé</u></strong>',\n                      icon: 'info',\n                      width: 400,\n                      html:\n                      '<p>' + that.ListeDesProgrammesRetourner[index[0].valuse] +'</p>' ,\n\n                      showCloseButton: true,\n                      showCancelButton: true,\n                      focusConfirm: false,\n                      confirmButtonText:\n                      '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                });\n        },\n\n        SendDataQuickFill : function()\n        {\n\n              /*Envoie de données à QuickFill*/\n\n              var that =  this;\n              var listeofObjectElement =  new Array();\n              var newObject = new Map();\n              var grid2 = document.getElementsByClassName(\"e-grid\")[1].ej2_instances[0];\n              var resultcomponent = document.getElementById(\"resultatcomponent\");\n              \n\n\n              if(that.ChoiseQuickFill.choix == 1)\n              {\n\n                  setTimeout(function cb() {\n\n\n                        var jsonText1 = JSON.stringify(Array.from(that.listeEntres));\n                        var jsonText3 = JSON.stringify(Array.from(that.ListeElementsEnvoyerQuickFill));\n\n                        \n                        \n                        axios.post(\"http://localhost:8000/QuickFill/sessions/QuickExs\", {\n\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        data: {\n                          \n                          DataEntreeBrute : jsonText1, \n                          DataGlobal : jsonText3,\n\n                        }\n                      })\n                      .then((response) => {\n\n\n\n                              \n                              var DataFinalToBeReplace = response.data[\"DataFinalToBeReplace\"];\n                              var IndiceColoneSortie = response.data[\"IndiceColoneSortie\"];\n                              var timewastQuickfill = response.data[\"timewastQuickfill\"];\n                              var memoryQuickfill = response.data[\"memoryQuickfill\"];\n                              var NombreExemples = response.data[\"NombreExemples\"];\n                              var listedesprogrammes = response.data[\"listedesprogrammes\"];\n                              var indiceduprogrammechoisi = response.data[\"indiceduprogrammechoisi\"];\n                              var AddElement =new Map();\n                              var AddElement2 =new Map();\n                              var Indiceline = 0;\n                              var Arange= \"\"\n                              var spreadsheet = that.$refs.spreadsheet;\n                              \n                              \n\n                              that.listeSorties.forEach(function(item) {\n                                  var newElement = new Array();\n                                  Indiceline = parseInt(item.position);\n                                  newElement.push(item.Output);\n                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie-1])\n                                  spreadsheet.updateCell({ value: newElement },Arange);\n\n                              });\n\n\n                              DataFinalToBeReplace.forEach(function(item) {\n                                  var newElement = new Array();\n                                  Indiceline = parseInt(item.position);\n                                  newElement.push(item.Output);\n                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie-1])\n                                  spreadsheet.updateCell({ value: newElement },Arange);\n\n                              });\n\n\n\n                              var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n                              spreedsheetcomponent.style.display = \"block\";\n\n\n                              var gridElement = document.getElementById(\"gridElement\");\n                              gridElement.style.display = \"none\"; \n\n                              Vue.swal.fire({\n                                title: '<strong><u>Statistic of QuickFill execution</u></strong>',\n                                icon: 'info',\n                                width: 400,\n                                html:\n                                  '<p> Time execution :' + timewastQuickfill + 's <br>' + 'Memory use :' + memoryQuickfill + 'Mo <br>' +'Number of programmes :' +  NombreExemples + ' program(s)</p> ',\n\n                                showCloseButton: true,\n                                showCancelButton: true,\n                                focusConfirm: false,\n                                confirmButtonText:\n                                  '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                              });\n\n                            \n                              \n\n\n\n\n\n                              \n\n                            Object.assign(that.$data, that.$options.data());\n                            \n                            \n                            AddElement.set('valuse',NombreExemples);\n                            AddElement2.set('valuse',indiceduprogrammechoisi);\n\n                            let obj = Array.from(AddElement).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n                            let obj2 = Array.from(AddElement2).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n\n                              Vue.set(that.lenofprogrammes,0, obj);\n                              Vue.set(that.idporgramme,0, obj2);\n\n                              listedesprogrammes.forEach((element,index) =>{\n                                  \n\n                              newObject.set('ID' , index)\n                              newObject.set('programme' , element)\n                              let obj3 = Array.from(newObject).reduce((obj, [key, value]) => (\n                                              Object.assign(obj, { [key]: value })\n                                            ), {});\n                              listeofObjectElement.push(obj3)\n\n                              Vue.set(that.ListeDesProgrammesRetourner, that.ListeDesProgrammesRetourner.length, element);\n\n                            });\n\n                            grid2.dataSource = listeofObjectElement;\n\n                              \n                            resultcomponent.style.display = \"block\";\n                                    \n\n\n\n                        \n                        \n                        \n                      })\n                      .catch((e) => {\n                        console.log(e);\n                      });\n                  });\n\n\n\n\n              }\n              else if(that.ChoiseQuickFill.choix == 2)\n              {\n\n\n\n\n                  setTimeout(function cb() {\n\n                        var jsonText1 = JSON.stringify(Array.from(that.listeEntres));\n                        var jsonText3 = JSON.stringify(Array.from(that.ListeElementsEnvoyerQuickFill));\n                        var jsonText4 = JSON.stringify(Array.from(that.listeSorties));\n                        \n                        axios.post(\"http://localhost:8000/QuickFill/filter/QuickExsFilter\", {\n\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        data: {\n                          \n                          DataEntreeBrute : jsonText1, \n                          DataGlobal : jsonText3,\n                          MesSorties : jsonText4\n                        }\n                      })\n                      .then((response) => {\n\n\n\n                              \n                              var DataFinalToBeReplace = response.data[\"DataFinalToBeReplace\"];\n                              var IndiceColoneSortie = response.data[\"IndiceColoneSortie\"];\n                              var timewastQuickfill = response.data[\"timewastQuickfill\"];\n                              var memoryQuickfill = response.data[\"memoryQuickfill\"];\n                              var NombreExemples = response.data[\"NombreExemples\"];\n                              var listedesprogrammes = response.data[\"listedesprogrammes\"];\n                              var indiceduprogrammechoisi = response.data[\"indiceduprogrammechoisi\"];\n                              var AddElement =new Map();\n                              var AddElement2 =new Map();\n                              var Indiceline = 0;\n                              var Arange= \"\"\n                              var spreadsheet = that.$refs.spreadsheet;\n                              \n                              \n\n                              that.listeSorties.forEach(function(item) {\n                                  var newElement = new Array();\n                                  Indiceline = parseInt(item.position);\n                                  newElement.push(item.Output);\n                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie-1])\n                                  spreadsheet.updateCell({ value: newElement },Arange);\n\n                              });\n\n\n                              DataFinalToBeReplace.forEach(function(item) {\n                                  var newElement = new Array();\n                                  Indiceline = parseInt(item.position);\n                                  newElement.push(item.Output);\n                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie-1])\n                                  spreadsheet.updateCell({ value: newElement },Arange);\n\n                              });\n\n\n\n                              var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n                              spreedsheetcomponent.style.display = \"block\";\n\n\n                              var gridElement = document.getElementById(\"gridElement\");\n                              gridElement.style.display = \"none\"; \n\n                              Vue.swal.fire({\n                                title: '<strong><u>Statistic of QuickFill execution</u></strong>',\n                                icon: 'info',\n                                width: 400,\n                                html:\n                                  '<p> Time execution :' + timewastQuickfill + 's <br>' + 'Memory use :' + memoryQuickfill + 'Mo <br>' +'Number of programmes :' +  NombreExemples + ' program(s)</p> ',\n\n                                showCloseButton: true,\n                                showCancelButton: true,\n                                focusConfirm: false,\n                                confirmButtonText:\n                                  '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                              });\n\n                            \n                              \n\n\n\n\n\n                              \n\n                            Object.assign(that.$data, that.$options.data());\n                            \n                            \n                            AddElement.set('valuse',NombreExemples);\n                            AddElement2.set('valuse',indiceduprogrammechoisi);\n\n                            let obj = Array.from(AddElement).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n                            let obj2 = Array.from(AddElement2).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n\n                              Vue.set(that.lenofprogrammes,0, obj);\n                              Vue.set(that.idporgramme,0, obj2);\n\n                              listedesprogrammes.forEach((element,index) =>{\n                                  \n\n                              newObject.set('ID' , index)\n                              newObject.set('programme' , element)\n                              let obj3 = Array.from(newObject).reduce((obj, [key, value]) => (\n                                              Object.assign(obj, { [key]: value })\n                                            ), {});\n                              listeofObjectElement.push(obj3)\n\n                              Vue.set(that.ListeDesProgrammesRetourner, that.ListeDesProgrammesRetourner.length, element);\n\n                            });\n\n                            grid2.dataSource = listeofObjectElement;\n\n                              \n                            resultcomponent.style.display = \"block\";\n                                    \n\n\n\n                        \n                        \n                        \n                      })\n                      .catch((e) => {\n                        console.log(e);\n                      });\n                  });\n\n              }\n              else if(that.ChoiseQuickFill.choix == 3)\n              {\n\n\n\n\n\n                  setTimeout(function cb() {\n\n\n                        var jsonText1 = JSON.stringify(Array.from(that.listeEntres));\n                        var jsonText3 = JSON.stringify(Array.from(that.ListeElementsEnvoyerQuickFill));\n                        \n                        axios.post(\"http://localhost:8000/QuickFill/manyblocs/QuickExsManyBlock\", {\n\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        data: {\n                          \n                          DataEntreeBrute : jsonText1, \n                          DataGlobal : jsonText3\n                        }\n                      })\n                      .then((response) => {\n\n\n\n                              \n                              var DataFinalToBeReplace = response.data[\"DataFinalToBeReplace\"];\n                              var IndiceColoneSortie = response.data[\"IndiceColoneSortie\"];\n                              var timewastQuickfill = response.data[\"timewastQuickfill\"];\n                              var memoryQuickfill = response.data[\"memoryQuickfill\"];\n                              var NombreExemples = response.data[\"NombreExemples\"];\n                              var listedesprogrammes = response.data[\"listedesprogrammes\"];\n                              var indiceduprogrammechoisi = response.data[\"indiceduprogrammechoisi\"];\n                              var AddElement =new Map();\n                              var AddElement2 =new Map();\n                              var Indiceline = 0;\n                              var Arange= \"\"\n                              var spreadsheet = that.$refs.spreadsheet;\n                              \n                              \n                              that.listeSorties.forEach(function(item) {\n                                  var newElement = new Array();\n                                  Indiceline = parseInt(item.position);\n                                  newElement.push(item.Output);\n                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie-1])\n                                  spreadsheet.updateCell({ value: newElement },Arange);\n\n                              });\n\n\n                              DataFinalToBeReplace.forEach(function(item) {\n                                  var newElement = new Array();\n                                  Indiceline = parseInt(item.position);\n                                  newElement.push(item.Output);\n                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie-1])\n                                  spreadsheet.updateCell({ value: newElement },Arange);\n\n                              });\n\n\n\n                              var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n                              spreedsheetcomponent.style.display = \"block\";\n\n\n                              var gridElement = document.getElementById(\"gridElement\");\n                              gridElement.style.display = \"none\"; \n\n                              Vue.swal.fire({\n                                title: '<strong><u>Statistic of QuickFill execution</u></strong>',\n                                icon: 'info',\n                                width: 400,\n                                html:\n                                  '<p> Time execution :' + timewastQuickfill + 's <br>' + 'Memory use :' + memoryQuickfill + 'Mo <br>' +'Number of programmes :' +  NombreExemples + ' program(s)</p> ',\n\n                                showCloseButton: true,\n                                showCancelButton: true,\n                                focusConfirm: false,\n                                confirmButtonText:\n                                  '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                              });\n\n                            \n                              \n\n\n\n\n\n                              \n\n                            Object.assign(that.$data, that.$options.data());\n                            \n                            \n                            AddElement.set('valuse',NombreExemples);\n                            AddElement2.set('valuse',indiceduprogrammechoisi);\n\n                            let obj = Array.from(AddElement).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n                            let obj2 = Array.from(AddElement2).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n\n                              Vue.set(that.lenofprogrammes,0, obj);\n                              Vue.set(that.idporgramme,0, obj2);\n\n                              listedesprogrammes.forEach((element,index) =>{\n                                  \n\n                              newObject.set('ID' , index)\n                              newObject.set('programme' , element)\n                              let obj3 = Array.from(newObject).reduce((obj, [key, value]) => (\n                                              Object.assign(obj, { [key]: value })\n                                            ), {});\n                              listeofObjectElement.push(obj3)\n\n                              Vue.set(that.ListeDesProgrammesRetourner, that.ListeDesProgrammesRetourner.length, element);\n\n                            });\n\n                            grid2.dataSource = listeofObjectElement;\n\n                              \n                            resultcomponent.style.display = \"block\";\n                                    \n\n\n\n                        \n                        \n                        \n                      })\n                      .catch((e) => {\n                        console.log(e);\n                      });\n                  });\n\n              }\n\n \n\n        },\n        contextMenuClick: function(args) \n        {\n\n\n              var that = this;\n              var grid = document.getElementsByClassName(\"e-grid\")[0].ej2_instances[0];\n\n              if(that.ChoiseQuickFill.choix == 3)\n              {\n\n\n                    if(args.item.id === 'makeblock') \n                    {       \n\n                          \n                            \n\n                            document.execCommand(\"copy\");\n\n                            setTimeout(async () => \n                            {\n                                  const text = await navigator.clipboard.readText();\n                                  var AddBloc =new Map();\n                                  var InfoBlocMenuDistingue = new Map();\n                                  var AddtoContexMenu = new Map();\n                                  var EtsPresent =  false;\n                                  var idEstPresent = false;\n\n\n\n\n\n                                  that.ListeOfIdOfCotextMenu.forEach(function (item) {\n\n                                      \n                                      if(item == text)\n                                      {\n\n                                          EtsPresent =  true;\n                                      }\n                                  });\n\n                                  if(EtsPresent)\n                                  {\n\n                                    alert(' Bloc deja creer')\n                                  }\n                                  else\n                                  {\n                                        \n\n\n                                        that.listeElementToupdate.forEach(function (item,index) {\n                                            if(index == parseInt(that.idsortieselectionner.id, 10))\n                                            {\n                                              idEstPresent = true;\n                                            }\n                                        });\n\n                                        if(idEstPresent == false)\n                                        {\n                                              Vue.set(that.listeElementToupdate,parseInt(that.idsortieselectionner.id, 10), 1);\n                                              \n\n\n                                              AddBloc.set('message',text);\n                                              AddBloc.set('NameBloc','b'+that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)]+'***'+text);\n\n                                              AddtoContexMenu.set('text' , 'Contient le bloc ' + text);\n                                              AddtoContexMenu.set('target' , '.e-content');\n                                              AddtoContexMenu.set('id' , text);\n\n                                              InfoBlocMenuDistingue.set('text' , 'Contient le bloc ' + text);\n                                              InfoBlocMenuDistingue.set('idligne' , parseInt(that.idsortieselectionner.id, 10));\n\n                                              let obj = Array.from(AddBloc).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value })\n                                                                        ), {});\n                                              let obj2 = Array.from(AddtoContexMenu).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value }) \n                                                                        ), {});\n                                              \n                                              let obj3 = Array.from(InfoBlocMenuDistingue).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value }) \n                                                                        ), {});\n\n                                              grid.contextMenuModule.contextMenu.insertAfter( \n                                                  [obj2], that.contextMenuItems[that.contextMenuItems.length-1].id, true); \n                                            \n                                              \n                                              \n\n                                              Vue.set(that.ListeOfBlocs,that.ListeOfBlocs.length, obj);\n                                              Vue.set(that.ListeOfIdOfCotextMenu,that.ListeOfIdOfCotextMenu.length, text);\n                                              Vue.set(that.ListeMessagesOfCotextMenu,that.ListeMessagesOfCotextMenu.length, obj3);\n                                              \n\n\n                                        }\n                                        else\n                                        {\n\n\n                                             Vue.set(that.listeElementToupdate,parseInt(that.idsortieselectionner.id, 10), that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)] + 1);\n\n                                              AddBloc.set('message',text);\n                                              AddBloc.set('NameBloc','b'+that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)]+'***'+text);\n\n                                              AddtoContexMenu.set('text' , 'Contient le bloc ' + text);\n                                              AddtoContexMenu.set('target' , '.e-content');\n                                              AddtoContexMenu.set('id' , text);\n\n                                              InfoBlocMenuDistingue.set('text' , 'Contient le bloc ' + text);\n                                              InfoBlocMenuDistingue.set('idligne' , parseInt(that.idsortieselectionner.id, 10));\n\n                                              let obj = Array.from(AddBloc).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value })\n                                                                        ), {});\n                                              let obj2 = Array.from(AddtoContexMenu).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value }) \n                                                                        ), {});\n                                              \n                                              let obj3 = Array.from(InfoBlocMenuDistingue).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value }) \n                                                                        ), {});\n\n                                              grid.contextMenuModule.contextMenu.insertAfter( \n                                                  [obj2], that.contextMenuItems[that.contextMenuItems.length-1].id, true); \n                                            \n                                              \n                                              \n\n                                              Vue.set(that.ListeOfBlocs,that.ListeOfBlocs.length, obj);\n                                              Vue.set(that.ListeOfIdOfCotextMenu,that.ListeOfIdOfCotextMenu.length, text);\n                                              Vue.set(that.ListeMessagesOfCotextMenu,that.ListeMessagesOfCotextMenu.length, obj3);\n\n\n\n                                        }\n\n\n                                  }\n\n                            }, 200);\n                        \n                          \n                    }\n                    else if(args.item.id === 'makeconst')\n                    {\n\n\n\n\n                          document.execCommand(\"copy\");\n\n                            setTimeout(async () => \n                            {\n\n                                  var AddBloc =new Map();\n                                  var EtsPresent =  false;\n                                  var element = new Map();\n                                  var idEstPresent = false;\n\n                                  const text = await navigator.clipboard.readText();\n\n                                  that.ListeOfIdOfCotextMenu.forEach(function (item) {\n\n                                          \n                                          if(item == text)\n                                          {\n\n                                              EtsPresent =  true;\n                                          }\n                                      });\n\n                                      if(EtsPresent)\n                                      {\n\n                                        alert(' Bloc deja creer')\n                                      }\n                                      else\n                                      {\n                                            that.listeElementToupdate.forEach(function (item,index) {\n                                                if(index == parseInt(that.idsortieselectionner.id, 10))\n                                                {\n                                                  idEstPresent = true;\n                                                }\n                                            });\n                                          if(idEstPresent == false)\n                                          {                            \n                                                Vue.set(that.listeElementToupdate,parseInt(that.idsortieselectionner.id, 10), 1);                \n                                            \n                                                \n                                                \n                                                element = new Map();\n\n                                                AddBloc.set('message','Le bloc ' + text + ' est une  constante');\n                                                AddBloc.set('NameBloc','b'+that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)]+'***'+text);\n\n                                                  element.set('b'+that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)]+'***'+text,\"ConstStr\");\n                                                  element.set('Entrer' , that.listeSorties[parseInt(that.idsortieselectionner.id, 10)].Entrer);\n                                                  element.set('Output' , that.listeSorties[parseInt(that.idsortieselectionner.id, 10)].Output);\n                                                \n\n\n                                                let obj = Array.from(AddBloc).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n                                                let obj2 = Array.from(element).reduce((obj2, [key, value]) => (\n                                                                              Object.assign(obj2, { [key]: value })\n                                                                            ), {});\n\n\n                                              \n                                                Vue.set(that.ListeOfBlocs,that.ListeOfBlocs.length, obj);\n                                                Vue.set(that.ListeElementsEnvoyerQuickFill, that.ListeElementsEnvoyerQuickFill.length, obj2);\n                                          }\n                                          else\n                                          {\n\n\n                                                    Vue.set(that.listeElementToupdate,parseInt(that.idsortieselectionner.id, 10), that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)] + 1);\n                                                \n                                                    \n                                                    \n                                                    element = new Map();\n\n                                                    AddBloc.set('message','Le bloc ' + text + ' est une  constante');\n                                                    AddBloc.set('NameBloc','b'+that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)]+'***'+text);\n\n                                                      element.set('b'+that.listeElementToupdate[parseInt(that.idsortieselectionner.id, 10)]+'***'+text,\"ConstStr\");\n                                                      element.set('Entrer' , that.listeSorties[parseInt(that.idsortieselectionner.id, 10)].Entrer);\n                                                      element.set('Output' , that.listeSorties[parseInt(that.idsortieselectionner.id, 10)].Output);\n                                                    \n\n\n                                                    let obj = Array.from(AddBloc).reduce((obj, [key, value]) => (\n                                                                                Object.assign(obj, { [key]: value })\n                                                                              ), {});\n                                                    let obj2 = Array.from(element).reduce((obj2, [key, value]) => (\n                                                                                  Object.assign(obj2, { [key]: value })\n                                                                                ), {});\n\n\n                                                  \n                                                    Vue.set(that.ListeOfBlocs,that.ListeOfBlocs.length, obj);\n                                                    Vue.set(that.ListeElementsEnvoyerQuickFill, that.ListeElementsEnvoyerQuickFill.length, obj2);\n                                          \n                                          }\n                                            \n\n\n\n\n                                      }\n\n\n\n\n                                \n                                  \n                            }, 200);\n\n                    }\n                    else if(that.ListeOfIdOfCotextMenu.some(e => e === args.item.id))\n                    {\n\n                          document.execCommand(\"copy\");\n\n\n\n                            setTimeout(async () => \n                            {\n\n                                  const text = await navigator.clipboard.readText();\n\n                                  that.ListeOfBlocs.forEach(function (item) {\n\n                                      \n                                      if(item.message == args.item.id)\n                                      {\n\n                                          var element = new Map();\n\n                                          element.set(item.NameBloc,text);\n                                          \n                                          element.set('Entrer' , that.listeSorties[parseInt(that.idsortieselectionner.id, 10)].Entrer);\n                                          element.set('Output' , that.listeSorties[parseInt(that.idsortieselectionner.id, 10)].Output);\n                                          console.log(\"test des test  : \" , args.event.target);\n                                          element.set('KeyOfElement' , \"v\" + (parseInt(that.idColoneUtiliser.id)+1));\n\n                                          console.log(\"fffffffffffffffffffffffff : \" , element);\n                                          let obj = Array.from(element).reduce((obj, [key, value]) => (\n                                                                      Object.assign(obj, { [key]: value })\n                                                                    ), {});\n\n                                          Vue.set(that.ListeElementsEnvoyerQuickFill, that.ListeElementsEnvoyerQuickFill.length, obj);\n\n                                          \n                                      }\n                                  });\n\n                                \n                                  \n                            }, 200);\n\n\n                    \n\n\n\n\n                    }\n\n\n\n              }\n              else\n              {\n\n              \n                    if(args.item.id === 'makeblock') \n                    {       \n\n                            \n                            \n\n                            document.execCommand(\"copy\");\n\n                            setTimeout(async () => \n                            {\n                                  const text = await navigator.clipboard.readText();\n                                  var AddBloc =new Map();\n                                  var InfoBlocMenuDistingue = new Map();\n                                  var AddtoContexMenu = new Map();\n                                  var EtsPresent =  false;\n\n\n\n\n\n                                  that.ListeOfIdOfCotextMenu.forEach(function (item) {\n\n                                      \n                                      if(item == text)\n                                      {\n\n                                          EtsPresent =  true;\n                                      }\n                                  });\n\n                                  if(EtsPresent)\n                                  {\n\n                                    alert(' Bloc deja creer')\n                                  }\n                                  else\n                                  {\n                                        that.ElementToUpdate = that.ElementToUpdate +1 ;\n\n                                        AddBloc.set('message',text);\n                                        AddBloc.set('NameBloc','b'+that.ElementToUpdate+'***'+text);\n                                        InfoBlocMenuDistingue.set('text' , 'Contient le bloc ' + text);\n                                        InfoBlocMenuDistingue.set('idligne' , parseInt(that.idsortieselectionner.id, 10));\n                                        \n\n                                        AddtoContexMenu.set('text' , 'Contient le bloc ' + text);\n                                        AddtoContexMenu.set('target' , '.e-content');\n                                        AddtoContexMenu.set('id' , text);\n\n                                        let obj = Array.from(AddBloc).reduce((obj, [key, value]) => (\n                                                                    Object.assign(obj, { [key]: value })\n                                                                  ), {});\n                                        let obj2 = Array.from(AddtoContexMenu).reduce((obj, [key, value]) => (\n                                                                    Object.assign(obj, { [key]: value }) \n                                                                  ), {});\n                                        \n                                        let obj3 = Array.from(InfoBlocMenuDistingue).reduce((obj, [key, value]) => (\n                                                                          Object.assign(obj, { [key]: value }) \n                                                                        ), {});\n\n                                        grid.contextMenuModule.contextMenu.insertAfter( \n                                            [obj2], that.contextMenuItems[that.contextMenuItems.length-1].id, true); \n                                      \n                                        \n                                        \n\n                                        Vue.set(that.ListeOfBlocs,that.ListeOfBlocs.length, obj);\n                                        Vue.set(that.ListeOfIdOfCotextMenu,that.ListeOfIdOfCotextMenu.length, text);\n                                        Vue.set(that.ListeMessagesOfCotextMenu,that.ListeMessagesOfCotextMenu.length, obj3);\n\n\n\n                                  }\n\n                            }, 200);\n                        \n                          \n                    }\n                    else if(args.item.id === 'makeconst')\n                    {\n\n\n\n\n                          document.execCommand(\"copy\");\n\n                            setTimeout(async () => \n                            {\n\n                                  var AddBloc =new Map();\n                                  var EtsPresent =  false;\n\n                                  const text = await navigator.clipboard.readText();\n\n                                  that.ListeOfIdOfCotextMenu.forEach(function (item) {\n\n                                          \n                                          if(item == text)\n                                          {\n\n                                              EtsPresent =  true;\n                                          }\n                                      });\n\n                                      if(EtsPresent)\n                                      {\n\n                                        alert(' Bloc deja creer')\n                                      }\n                                      else\n                                      {\n                                        \n                                        that.ElementToUpdate = that.ElementToUpdate +1 ;\n                                        var element = new Map();\n\n                                        AddBloc.set('message','Le bloc ' + text + ' est une  constante');\n                                        AddBloc.set('NameBloc','b'+that.ElementToUpdate+'***'+text);\n\n                                          element.set('b'+that.ElementToUpdate+'***'+text,\"ConstStr\");\n                                          element.set('Entrer' , that.listeSorties[0].Entrer);\n                                          element.set('Output' , that.listeSorties[0].Output);\n                                        \n\n\n                                        let obj = Array.from(AddBloc).reduce((obj, [key, value]) => (\n                                                                    Object.assign(obj, { [key]: value })\n                                                                  ), {});\n                                        let obj2 = Array.from(element).reduce((obj2, [key, value]) => (\n                                                                      Object.assign(obj2, { [key]: value })\n                                                                    ), {});\n\n\n                                      \n                                        Vue.set(that.ListeOfBlocs,that.ListeOfBlocs.length, obj);\n                                        Vue.set(that.ListeElementsEnvoyerQuickFill, that.ListeElementsEnvoyerQuickFill.length, obj2);\n\n                                        \n\n\n\n\n                                      }\n\n\n\n\n                                \n                                  \n                            }, 200);\n\n                    }\n\n                    else if(that.ListeOfIdOfCotextMenu.some(e => e === args.item.id))\n                    {\n\n                          document.execCommand(\"copy\");\n\n\n\n                            setTimeout(async () => \n                            {\n\n                                  const text = await navigator.clipboard.readText();\n\n                                  that.ListeOfBlocs.forEach(function (item) {\n\n                                      \n                                      if(item.message == args.item.id)\n                                      {\n\n                                          var element = new Map();\n                                          element.set(item.NameBloc,text);\n                                          element.set('Entrer' , that.listeSorties[0].Entrer);\n                                          element.set('Output' , that.listeSorties[0].Output);\n                                           element.set('KeyOfElement' , \"v\" + (parseInt(that.idColoneUtiliser.id)+1));\n                                           console.log(\"fffffffffffffffffffffffff : \" , element);\n                                          let obj = Array.from(element).reduce((obj, [key, value]) => (\n                                                                      Object.assign(obj, { [key]: value })\n                                                                    ), {});\n\n                                          Vue.set(that.ListeElementsEnvoyerQuickFill, that.ListeElementsEnvoyerQuickFill.length, obj);\n\n                                          \n                                      }\n                                  });\n\n                                \n                                  \n                            }, 200);\n\n\n                    \n\n\n\n\n                    }\n\n\n              }\n\n\n\n\n\n        },\n        contextMenuBeforeOpen: function () \n        {    \n                var spreadsheet = this.$refs.spreadsheet;\n                spreadsheet.removeContextMenuItems(['Paste Special'], false);\n        },  /* Fonction qui s'execute avant l'ouverture du menu contextuel de la page d'accueil(spreadsheet) */\n        rowDataBound: function (args) {\n          \n           var that = this;\n           \n           var index = JSON.parse(JSON.stringify(that.idporgramme.slice(0, 1)));\n\n           \n           if (args.data.ID == index[0].valuse)\n           {\n              \n              args.row.style.backgroundColor = \"MistyRose\";\n              //args.row.css(\"backgroundColor\", \"#F3C3C3\");/*custom css applied to the row */\n           }\n\n               \n   \n       },\n       created: function () \n       {\n                    var that = this;  /* permet de manipuler les variables que retourne la fonction data */\n                    var spreadsheet = that.$refs.spreadsheet;\n                    var usedRange = 0;\n                    var indicelignemax = 0;\n                    var indicedecolenmax = 0;\n                    var septsept = 0;\n                    var sheetName = 0; /* nom de la feuille de calcul active */\n                    var IndiceEvolue = 0; \n                    var ChainePlusTest = \"\";\n                    var DataExpDemo =new Map(); /* Contient le jeu de données (entrée, sortie) */\n                    var resultcomponent = document.getElementById(\"resultatcomponent\"); /* Recupere la grille des resultats */\n                    resultcomponent.style.display = \"none\";\n\n\n\n\n                    spreadsheet.hideRibbonTabs(['Home' , 'Formulas' , 'Data','Insert' , 'View']); /* masque les elements pris en argument sur le ruban */\n                    spreadsheet.addRibbonTabs([  /* ajout les nouveaux menu sur le ruban */\n                          \n                          { header: { text: 'GenerateResult' }, content: \n                            [\n                              \n                                  \n                                { text: 'FLashFill', tooltipText: 'FlashFill',\n                                  click : function() {\n                                    var resultcomponent = document.getElementById(\"resultatcomponent\");\n                                    resultcomponent.style.display = \"none\";\n\n                                      indicedecolenmax = 0;\n                                      indicedecolenmax = 0;\n                                      septsept = 1;\n                                      ChainePlusTest = \"\";\n                                      DataExpDemo =new Map();\n                                      usedRange = spreadsheet.ej2Instances.getActiveSheet().usedRange; /* contient la plage activev(indice la derniere ligne, indice derniere colone) */\n                                      indicelignemax = usedRange.rowIndex;\n                                      indicedecolenmax = usedRange.colIndex;\n                                      sheetName = spreadsheet.ej2Instances.getActiveSheet().name;\n\n                                      spreadsheet.ej2Instances.getData(sheetName + \"!\"+ getRangeAddress([0, 0, indicelignemax, indicedecolenmax])).then( (cells)=> /* recupere les données de la plage active et effetue un traitement popur chaque cellule */\n                                      {\n\n                                              cells.forEach((cell)=>{ /* cells contient l'ensemble de toutes les cellules */\n\n                                                if(IndiceEvolue == indicedecolenmax) /* IndiceEvolue permet de parcourir les colones */\n                                                {\n                                                  \n                                                    /* Recuperation de la chaine de sortie s : elle peut etre vide ou non */\n                                                    ChainePlusTest = ChainePlusTest.substring(0, ChainePlusTest.length-3) /* on surpime la derniere chaine \"+++\" */\n\n                                                    if(typeof(cell.value) == \"undefined\")\n                                                    {\n                                                      DataExpDemo = DataExpDemo.set(septsept.toString()+'***'+'' , ChainePlusTest);\n                                                      /* septsept contient l'indice de la ligne en cours de traitement */\n\n                                                    }\n                                                    else\n                                                    {\n                                                      DataExpDemo = DataExpDemo.set(septsept.toString()+'***'+cell.value,ChainePlusTest);\n                                                      /* DataExpDemo est un dico qui contient les exemple d'entree sortie , stockés sur une certaine forme prenqnt en compte le numero de ligne de chaque exp */\n                                                    }\n                                                    \n                                                    ChainePlusTest = '';\n                                                    IndiceEvolue = 0;\n                                                    septsept = septsept + 1;\n                                                }\n                                                else\n                                                {\n                                                    /* cette partie nous permet de recuperer la chaine d'entrée sigma. La recuperation se fait tant qu'on a pa atteint la deniere colone active. */\n                                                    if(typeof(cell.value) != \"undefined\")\n                                                    {\n                                                      ChainePlusTest = ChainePlusTest + cell.value + \"+++\"; \n                                                      IndiceEvolue = IndiceEvolue + 1;\n                                                    }\n\n                                                }\n\n                                              });\n            \n                                          });\n\n                                      setTimeout(function cb() {  /* setTimeout indique que lq fonction cb() doit s'executer en derniere position */\n\n\n                                          var jsonText = JSON.stringify(Array.from(DataExpDemo.entries()));\n                                          \n                                          axios.post(\"http://localhost:8000/FlashFill/sessions/FlashExs\", {\n\n                                          headers: {  /* headers permet de definir le type de contenu qu'on veut envoyer : p il s'agit d'un contenu json dans notre cas */\n                                              'Content-Type': 'application/json',\n                                          },\n                                          data: {\n                                            \n                                            DataEntree : jsonText  /* DataEntree stocke nos donées json , qui sont ensuite traitées  au niveau du backend */\n                                          }\n                                        })\n                                        .then((response) => {\n\n\n\n                                          if(response.data[\"MessageCles\"] == \"False\")\n                                          {\n                                              Vue.swal.fire({\n                                                    icon: 'error',\n                                                    title: 'Oops...',\n                                                    text: 'FlashFill Do not understant what you want!',\n                                                    footer: '<p>It can be a condition execution problem : <br> Condition for good execution : <br> <ol><li>Your data most have the same structure</li><li>You most have a least one exemple with a output</li></ol><br></p>'\n                                                  });\n\n                                          }\n                                          else\n                                          {\n                                              \n                                                var DataFinalToBeReplace = response.data[\"DataFinalToBeReplace\"];\n                                                var IndiceColoneSortie = response.data[\"IndiceColoneSortie\"];\n                                                var timewastFlasfill = response.data[\"timewastFlasfill\"];\n                                                var NombreExemples = response.data[\"NombreExemples\"];\n                                                var memoryFlasfill = response.data[\"memoryFlasfill\"];\n                                                var Indiceline = 0;\n                                                var Arange= \"\"\n                                                \n\n\n                                                Object.keys(DataFinalToBeReplace).forEach(function(prop) {\n                                                  \n                                                  Indiceline = parseInt(prop);\n                                                  Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie])\n                                                  Arange = Arange.toString().split(\":\")[0]\n                                                  spreadsheet.updateCell({ value: DataFinalToBeReplace[prop] },Arange);\n                                                  \n                                                }); \n\n\n\n                                                  Vue.swal.fire({\n                                                    title: '<strong><u>Statistic of FlashFill execution</u></strong>',\n                                                    icon: 'info',\n                                                    width: 400,\n                                                    html:\n                                                      '<p> Time execution :' + timewastFlasfill + 's <br>' + 'Number of programmes :' + 'Memory use :' + memoryFlasfill + 'Mo <br>' + NombreExemples + ' programme(s)</p> ',\n\n                                                    showCloseButton: true,\n                                                    showCancelButton: true,\n                                                    focusConfirm: false,\n                                                    confirmButtonText:\n                                                      '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                                                  });\n                                      \n                                                \n\n\n\n                                          }\n                                          \n                                          \n                                        \n                                        })\n                                        .catch((e) => {\n                                          console.log(e);\n                                        });\n                                      });\n\n                                } },\n                                \n                                \n                                { text: 'QuickFill', tooltipText: 'QuickFill',\n                                click : function() \n                                {\n\n\n\n\n\n\n\n\n                                              indicedecolenmax = 0;\n                                              indicedecolenmax = 0;\n                                              septsept = 1;\n                                              ChainePlusTest = \"\";\n                                              DataExpDemo =new Map();\n                                              usedRange = spreadsheet.ej2Instances.getActiveSheet().usedRange;\n                                              indicelignemax = usedRange.rowIndex;\n                                              indicedecolenmax = usedRange.colIndex;\n                                              Vue.set(that.IndiceColoneSortie , 'id' , indicedecolenmax);\n                                              sheetName = spreadsheet.ej2Instances.getActiveSheet().name;\n\n                                                        \n                                              var grid = document.getElementsByClassName(\"e-grid\")[0].ej2_instances[0]; // recuperation de la Grid\n                                              var ElementMapInstanceEntree =  new Map();\n                                              var ElementIntermediareMapInstanceEntree =  new Map();\n                                              var ElementMapInstanceSortie =  new Map();\n                                              var ElementMapInstanceSortie2 =  new Map();\n                                              var listechoix = new Array();\n                                              var decoupersortier = new Array();\n                                              var decouperentree = new Array();\n                                              var MessageCles = true;\n                                              var resultcomponent = document.getElementById(\"resultatcomponent\");\n                                              resultcomponent.style.display = \"none\";\n\n                                              spreadsheet.ej2Instances.getData(sheetName + \"!\"+ getRangeAddress([0, 0, indicelignemax, indicedecolenmax])).then( (cells)=>\n                                              {\n\n                                                    cells.forEach((cell)=>{\n\n                                                      if(IndiceEvolue == indicedecolenmax)\n                                                      {\n                                                        \n                                                        \n                                                          ChainePlusTest = ChainePlusTest.substring(0, ChainePlusTest.length-3)\n\n                                                          if(typeof(cell.value) == \"undefined\")\n                                                          {\n                                                              DataExpDemo.set(septsept.toString()+'***'+'' , ChainePlusTest);\n\n                                                          }\n                                                          else\n                                                          {\n                                                              DataExpDemo.set(septsept.toString()+'***'+cell.value, ChainePlusTest);\n                                                          }\n                                                          \n                                                          ChainePlusTest = '';\n                                                          IndiceEvolue = 0;\n                                                          septsept = septsept + 1;\n                                                      }\n                                                      else\n                                                      {\n                                                          \n                                                          if(typeof(cell.value) != \"undefined\")\n                                                          {\n                                                            ChainePlusTest = ChainePlusTest + cell.value + \"+++\"; \n                                                            IndiceEvolue = IndiceEvolue + 1;\n                                                          }\n\n                                                      }\n\n                                                    });\n          \n                                              });\n\n                                              setTimeout(function cb() {\n\n                                                        \n                                                        DataExpDemo.forEach((value, key) => {\n                                                          \n                                                          if(value === \"\")\n                                                          {\n\n                                                              Vue.swal.fire({\n                                                                  icon: 'error',\n                                                                  title: 'Oops...',\n                                                                  text: 'QuickFill Do not understant what you want!',\n                                                                  footer: '<p>It can be a condition execution problem : <br> Condition for good execution : <br> <ol><li>Your data most have the same structure</li><li>You most have a least one exemple with a output</li></ol><br></p>'\n                                                                });\n\n\n                                                              MessageCles = false;\n\n                                                              return;\n\n                                                          }\n                                                          else\n                                                          {\n\n\n                                                                    ElementMapInstanceEntree = new Map();\n                                                                    ElementMapInstanceSortie = new Map();\n                                                                    ElementMapInstanceSortie2 = new Map();\n                                                                    ElementIntermediareMapInstanceEntree =  new Map();\n                                                                    decouperentree = value.split(\"+++\");\n                                                                    decoupersortier = key.split(\"***\");\n                                                                    \n                                                                    \n\n                                                                    if(decoupersortier.length >1 && decoupersortier[1] != \"\")\n                                                                    {\n\n                                                                        if(value != \"\")\n                                                                        {\n\n                                                                            decouperentree.forEach(function (item, index) {\n                                                                              ElementIntermediareMapInstanceEntree.set(\"v\"+(index+1).toString(), item);\n                                                                              ElementMapInstanceSortie.set(\"v\"+(index+1).toString(), item);\n                                                                              \n                                                                            });\n\n\n                                                                            let obj = Array.from(ElementIntermediareMapInstanceEntree).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n\n\n                                                                            ElementMapInstanceSortie2.set(\"Entrer\" , obj);\n                                                                            ElementMapInstanceSortie.set(\"Output\" , decoupersortier[1]);\n                                                                            ElementMapInstanceSortie2.set(\"Output\" , decoupersortier[1]);\n                                                                            ElementMapInstanceSortie2.set(\"position\" , decoupersortier[0]);\n\n                                                                            listechoix.push(ElementMapInstanceSortie);\n\n                                                                            let obj2 = Array.from(ElementMapInstanceSortie2).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n\n\n                                                                            Vue.set(that.listeSorties,that.listeSorties.length,obj2)\n\n                                                                        }\n\n\n\n                                                                    }\n                                                                    else\n                                                                    {\n\n                                                                          if(value != \"\")\n                                                                          {\n                                                                            decouperentree.forEach(function (item, index) {\n                                                                              ElementIntermediareMapInstanceEntree.set(\"v\"+(index+1).toString(), item);\n                                                                            });\n                                                                            let obj = Array.from(ElementIntermediareMapInstanceEntree).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n                                                                            ElementMapInstanceEntree.set(\"Entrer\" , obj);\n                                                                            ElementMapInstanceEntree.set(\"position\" , decoupersortier[0]);\n                                                                            let obj2 = Array.from(ElementMapInstanceEntree).reduce((obj, [key, value]) => (\n                                                                            Object.assign(obj, { [key]: value })\n                                                                          ), {});\n                                                                            Vue.set(that.listeEntres ,that.listeEntres.length,obj2)\n                                                                            \n                                                                          }\n                                                                          \n\n                                                                    }\n\n\n                                                          }\n\n                                                        });\n\n\n\n\n\n                                                          if(MessageCles)\n                                                          {\n\n                                                            if(listechoix.length == 1)\n                                                            {\n\n\n                                                                    setTimeout(function knr() {\n\n\n                                                                                if(MessageCles)\n                                                                                {\n\n                                                                                      var test2 = new Array();\n                                                                                    \n                                                                                      \n                                                                                      var sortieUtiliser = listechoix[0];\n                                                                                      \n\n                                                                                        let obj = Array.from(sortieUtiliser).reduce((obj, [key, value]) => (\n                                                                                                  Object.assign(obj, { [key]: value }) // Be careful! Maps can have non-String keys; object literals can't.\n                                                                                                ), {});\n                                                                                      \n                                                                                        test2.push(obj);                                                  \n                                                                                                                                        \n                                                                                        grid.dataSource = test2;\n\n                                                                                        var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n                                                                                        spreedsheetcomponent.style.display = \"none\";\n\n\n                                                                                        var gridElement = document.getElementById(\"gridElement\");\n                                                                                        gridElement.style.display = \"block\"; \n                                                                                }\n                                                                    });\n                                                              \n                                                            }\n                                                            else\n                                                            {\n\n                                                                Vue.swal.fire({\n                                                                      title: 'Que desirer vous faire avec QuickFIll',\n                                                                      html: `\n                                                                                <div class=\"form-check\">\n                                                                                  <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\" checked>\n                                                                                  <label class=\"form-check-label\" for=\"exampleRadios1\">\n                                                                                      Faire du filtrage\n                                                                                  </label>\n                                                                                </div>\n                                                                                <div class=\"form-check\">\n                                                                                  <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\">\n                                                                                  <label class=\"form-check-label\" for=\"exampleRadios2\">\n                                                                                    Faire des blocs sur pluiseurs exemples\n                                                                                  </label>\n                                                                                </div>\n                                                                      `,\n                                                                      focusConfirm: false,\n                                                                      preConfirm: () => \n                                                                      {\n                                                                        \n                                                                            if (document.getElementById('exampleRadios1').checked)\n                                                                            {\n                                                                                  setTimeout(function knr() {\n\n\n                                                                                                if(MessageCles)\n                                                                                                {\n                                                                                                    \n                                                                                                      var test2 = new Array();\n                                                                                                    \n                                                                                                      \n                                                                                                      var sortieUtiliser = listechoix[0];\n\n                                                                                                      \n\n                                                                                                      let obj = Array.from(sortieUtiliser).reduce((obj, [key, value]) => (\n                                                                                                                  Object.assign(obj, { [key]: value }) // Be careful! Maps can have non-String keys; object literals can't.\n                                                                                                                ), {});\n                                                                                                      \n                                                                                                      test2.push(obj);                                                  \n                                                                                                                                                        \n                                                                                                      grid.dataSource = test2;\n\n                                                                                                      var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n                                                                                                      spreedsheetcomponent.style.display = \"none\";\n\n\n                                                                                                      var gridElement = document.getElementById(\"gridElement\");\n                                                                                                      gridElement.style.display = \"block\"; \n\n                                                                                                      Vue.set(that.ChoiseQuickFill, 'choix' , 2);\n                                                                                                }\n                                                                                    });\n\n                                                                            }\n                                                                            else if(document.getElementById('exampleRadios2').checked)\n                                                                            {\n                                                                                \n\n                                                                                    setTimeout(function knr2() {\n\n\n                                                                                                if(MessageCles)\n                                                                                                {\n\n                                                                                                      var test2 = new Array();\n                                                                                                      listechoix.forEach(function (item) \n                                                                                                      {\n                                                                                                        let obj = Array.from(item).reduce((obj, [key, value]) => (\n                                                                                                                  Object.assign(obj, { [key]: value }) // Be careful! Maps can have non-String keys; object literals can't.\n                                                                                                                ), {});\n                                                                                                        test2.push(obj);\n                                                                                                      });\n                                                \n                                                                                                      grid.dataSource = test2;\n\n                                                                                                      var spreedsheetcomponent = document.getElementById(\"spreedsheetcomponent\");\n                                                                                                      spreedsheetcomponent.style.display = \"none\";\n\n\n                                                                                                      var gridElement = document.getElementById(\"gridElement\");\n                                                                                                      gridElement.style.display = \"block\"; \n\n\n\n                                                                                                      Vue.set(that.ChoiseQuickFill, 'choix' , 3);\n                                                                                                }\n                                                                                    });\n                                                                            \n                                                                            \n                                                                            \n\n                                                                            }\n                                                                          \n                                                                        \n                                                                      }\n                                                                  });\n\n\n\n\n                                                            }\n\n\n\n\n                                                          }\n\n                                                                              \n\n                                                    });\n\n\n\n\n\n\n\n\n                                } } ,\n\n\n\n                                { text: 'FLashFillLoopFree', tooltipText: 'FLashFillLoopFree',\n                                click : function() {\n\n                                    indicedecolenmax = 0;\n                                    indicedecolenmax = 0;\n                                    septsept = 1;\n                                    ChainePlusTest = \"\";\n                                    DataExpDemo =new Map();\n                                    var AddElement =new Map();\n                                    var AddElement2 =new Map();\n                                    var listeofObjectElement =  new Array();\n                                    usedRange = spreadsheet.ej2Instances.getActiveSheet().usedRange;\n                                    indicelignemax = usedRange.rowIndex;\n                                    indicedecolenmax = usedRange.colIndex;\n                                    sheetName = spreadsheet.ej2Instances.getActiveSheet().name;\n                                    var resultcomponent = document.getElementById(\"resultatcomponent\");\n                                    resultcomponent.style.display = \"none\";\n\n                                    spreadsheet.ej2Instances.getData(sheetName + \"!\"+ getRangeAddress([0, 0, indicelignemax, indicedecolenmax])).then( (cells)=>\n                                    {\n\n                                          \n\n                                            cells.forEach((cell)=>{\n\n                                              if(IndiceEvolue == indicedecolenmax)\n                                              {\n                                                \n                                                \n                                                  ChainePlusTest = ChainePlusTest.substring(0, ChainePlusTest.length-3)\n\n                                                  if(typeof(cell.value) == \"undefined\")\n                                                  {\n                                                    DataExpDemo = DataExpDemo.set(septsept.toString()+'***'+'' , ChainePlusTest);\n\n                                                  }\n                                                  else\n                                                  {\n                                                    DataExpDemo = DataExpDemo.set(septsept.toString()+'***'+cell.value,ChainePlusTest);\n                                                  }\n                                                  \n                                                  ChainePlusTest = '';\n                                                  IndiceEvolue = 0;\n                                                  septsept = septsept + 1;\n                                              }\n                                              else\n                                              {\n                                                  \n                                                  if(typeof(cell.value) != \"undefined\")\n                                                  {\n                                                    ChainePlusTest = ChainePlusTest + cell.value + \"+++\"; \n                                                    IndiceEvolue = IndiceEvolue + 1;\n                                                  }\n\n                                              }\n\n                                            });\n          \n                                        });\n\n                                    setTimeout(function cb() {\n\n\n                                        var jsonText = JSON.stringify(Array.from(DataExpDemo.entries()));\n                                        \n                                        axios.post(\"http://localhost:8000/FlashFill/sessions/FlashFreeLoopExs\", {\n\n                                        headers: {\n                                            'Content-Type': 'application/json',\n                                        },\n                                        data: {\n                                          \n                                          DataEntree : jsonText\n                                        }\n                                      })\n                                      .then((response) => {\n\n\n\n                                        if(response.data[\"MessageCles\"] == \"False\")\n                                        {\n                                            Vue.swal.fire({\n                                                  icon: 'error',\n                                                  title: 'Oops...',\n                                                  text: 'FlashFill Do not understant what you want!',\n                                                  footer: '<p>It can be a condition execution problem : <br> Condition for good execution : <br> <ol><li>Your data most have the same structure</li><li>You most have a least one exemple with a output</li></ol><br></p>'\n                                                });\n\n                                        }\n                                        else\n                                        {\n                                            \n                                              var DataFinalToBeReplace = response.data[\"DataFinalToBeReplace\"];\n                                              var IndiceColoneSortie = response.data[\"IndiceColoneSortie\"];\n                                              var timewastFlasfill = response.data[\"timewastFlasfill\"];\n                                              var NombreExemples = response.data[\"NombreExemples\"];\n                                              var memoryFlasfill = response.data[\"memoryFlasfill\"];\n                                              var listedesprogrammes = response.data[\"listedesprogrammes\"];\n                                              var indiceduprogrammechoisi = response.data[\"indiceduprogrammechoisi\"];\n                                              var Indiceline = 0;\n                                              var Arange= \"\";\n                                              var newObject = new Map();\n                                              var grid2 = document.getElementsByClassName(\"e-grid\")[1].ej2_instances[0];\n                                              AddElement.set('valuse',NombreExemples);\n                                              AddElement2.set('valuse',indiceduprogrammechoisi);\n\n                                              \n\n                                              Object.keys(DataFinalToBeReplace).forEach(function(prop) {\n                                                \n                                                Indiceline = parseInt(prop);\n                                                Arange = getRangeAddress([Indiceline-1, IndiceColoneSortie])\n                                                Arange = Arange.toString().split(\":\")[0]\n                                                spreadsheet.updateCell({ value: DataFinalToBeReplace[prop] },Arange);\n                                                \n                                              }); \n\n                                                \n                                              \n\n\n                                               \n                                                \n\n                                                Vue.swal.fire({\n                                                  title: '<strong><u>Statistic of FlashFill execution</u></strong>',\n                                                  icon: 'info',\n                                                  width: 400,\n                                                  html:\n                                                    '<p> Time execution :' + timewastFlasfill + 's <br>' + 'Number of programmes :' +NombreExemples + ' programme(s)<br>'+ 'Memory use :' + memoryFlasfill + 'Mo</p>' ,\n\n                                                  showCloseButton: true,\n                                                  showCancelButton: true,\n                                                  focusConfirm: false,\n                                                  confirmButtonText:\n                                                    '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                                                });\n\n                                                \n                                            \n                                              let obj = Array.from(AddElement).reduce((obj, [key, value]) => (\n                                                                    Object.assign(obj, { [key]: value })\n                                                                  ), {});\n                                              let obj2 = Array.from(AddElement2).reduce((obj, [key, value]) => (\n                                                                    Object.assign(obj, { [key]: value })\n                                                                  ), {});\n                                              \n                                              Object.assign(that.$data, that.$options.data());\n                                              Vue.set(that.lenofprogrammes,0, obj);\n                                              Vue.set(that.idporgramme,0, obj2);\n                                              listedesprogrammes.forEach((element,index) =>{\n                                                  \n\n                                                    newObject.set('ID' , index)\n                                                    newObject.set('programme' , element)\n                                                    let obj3 = Array.from(newObject).reduce((obj, [key, value]) => (\n                                                                    Object.assign(obj, { [key]: value })\n                                                                  ), {});\n                                                    listeofObjectElement.push(obj3)\n\n                                                    Vue.set(that.ListeDesProgrammesRetourner, that.ListeDesProgrammesRetourner.length, element);\n\n                                                    \n\n\n\n\n                                              });\n                                              grid2.dataSource = listeofObjectElement;\n\n                                              var resultcomponent = document.getElementById(\"resultatcomponent\");\n                                              resultcomponent.style.display = \"block\";\n                                    \n                                              \n\n\n\n                                        }\n                                        \n                                        \n                                      \n                                      })\n                                      .catch((e) => {\n                                        console.log(e);\n                                      });\n                                    });\n\n                                } },\n\n\n\n\n\n                            ] \n                            \n                          \n                          \n                          \n                          \n                          }\n                          \n                          \n                          ,{ header: { text: 'Help' }, content: [{ text: 'QuickFill', tooltipText: 'QuickFill',\n                          click : function() {\n\n                                Vue.swal.fire({\n                                      title: '<strong><u>QuicFill Usage example</u></strong>',\n                                      icon: 'info',\n                                      width: 900,\n                                      html:\n                                        '<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/d_elXY2Lcfk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>',\n                                      showCloseButton: true, /* pour la fermeture du modal */\n                                      showCancelButton: true, /* bouton cancel */\n                                      focusConfirm: false,\n                                      confirmButtonText:\n                                        '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                                    });\n\n\n                          } },\n                          \n                          \n                          { text: 'FlashFill', tooltipText: 'FlashFill',\n                          click : function() {\n\n\n                              Vue.swal.fire({\n                                      title: '<strong><u>FlashFill Usage example</u></strong>',\n                                      icon: 'info',\n                                      width: 900,\n                                      html:\n                                        '<iframe width=\"768\" height=\"360\" src=\"https://www.youtube.com/embed/A7-E6sf6JOc?list=RDQMuK_M4fl3Ds8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>',\n                                      showCloseButton: true,\n                                      showCancelButton: true,\n                                      focusConfirm: false,\n                                      confirmButtonText:\n                                        '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                                    });\n\n                          } },\n                          \n                          { text: 'About', tooltipText: 'About',\n                          click : function() {\n\n\n                              Vue.swal.fire({\n                                      title: '<strong>About the project</strong>',\n                                      icon: 'info',\n                                      width: 900,\n                                      html:\n                                        '<p>QuicFill project is a project developper by Fokou Vanessa Laure (adress mail) base on the FlashFill algorithme  to test a idea of and iteractive approche using independant bloc approche to generate string progamme base on example</p>',\n                                      showCloseButton: true,\n                                      showCancelButton: true,\n                                      focusConfirm: false,\n                                      confirmButtonText:\n                                        '<i class=\"fa fa-thumbs-up\"></i> Great!',\n                                    });\n                          } },\n                          \n                          ] }]\n                      );\n                        \n                \n            },\n      \n        },\n\n\n\n\n    provide: /* defintion des elements presentes dans la grille */\n    { \n      grid: [ContextMenu, Page], \n    }, \n\n\n\n  }\n</script>\n\n<style>\n  @import \"../node_modules/@syncfusion/ej2-vue-spreadsheet/styles/material.css\";\n  @import '../node_modules/@syncfusion/ej2-base/styles/material.css';  \n  @import '../node_modules/@syncfusion/ej2-buttons/styles/material.css';\n  @import '../node_modules/@syncfusion/ej2-calendars/styles/material.css';    \n  @import '../node_modules/@syncfusion/ej2-dropdowns/styles/material.css';  \n  @import '../node_modules/@syncfusion/ej2-inputs/styles/material.css';  \n  @import '../node_modules/@syncfusion/ej2-navigations/styles/material.css';\n  @import '../node_modules/@syncfusion/ej2-popups/styles/material.css';\n  @import '../node_modules/@syncfusion/ej2-splitbuttons/styles/material.css';\n  @import '../node_modules/@syncfusion/ej2-grids/styles/material.css';\n  @import \"../node_modules/@syncfusion/ej2-spreadsheet/styles/material.css\";\n  @import \"../node_modules/sweetalert2/dist/sweetalert2.min.css\";\n  @import \"../node_modules/@syncfusion/ej2-vue-grids/styles/material.css\";\n</style>\n"]}]}