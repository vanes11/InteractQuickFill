import { ComponentBase } from '@syncfusion/ej2-vue-base';
export declare const properties: string[];
export declare const modelProps: string[];
export declare const testProp: any;
export declare const props: any;
export declare const watch: any;
export declare const emitProbs: any;
export declare const isExecute: any;
/**
 * `ejs-grid` represents the VueJS Grid Component.
 * ```vue
 * <ejs-grid :dataSource='data' allowPaging='true' allowSorting='true'></ejs-grid>
 * ```
 */
export declare class GridComponent extends ComponentBase {
    ej2Instances: any;
    propKeys: string[];
    models: string[];
    hasChildDirective: boolean;
    protected hasInjectedModules: boolean;
    tagMapper: {
        [key: string]: Object;
    };
    tagNameMapper: Object;
    isVue3: boolean;
    templateCollection: any;
    constructor();
    clearTemplate(templateNames?: string[]): any;
    setProperties(prop: any, muteOnChange: boolean): void;
    trigger(eventName: string, eventProp: {
        [key: string]: Object;
    }, successHandler?: Function): void;
    render(createElement: any): any;
    addRecord(data?: Object, index?: number): void;
    autoFitColumns(fieldNames?: string | string[]): void;
    batchAsyncUpdate(changes: Object): void;
    batchUpdate(changes: Object): void;
    calculatePageSizeByParentHeight(containerHeight: number | string): number;
    clearCellSelection(): void;
    clearFiltering(fields?: string[]): void;
    clearGrouping(): void;
    clearRowSelection(): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEdit(): void;
    copy(withHeader?: boolean): void;
    csvExport(excelExportProperties?: Object, isMultipleExport?: boolean, workbook?: Object, isBlob?: boolean): Object;
    dataReady(): void;
    deleteRecord(fieldname?: string, data?: Object): void;
    deleteRow(tr: Object): void;
    destroyTemplate(propertyNames?: string[], index?: any): void;
    detailCollapseAll(): void;
    detailExpandAll(): void;
    editCell(index: number, field: string): void;
    enableToolbarItems(items: string[], isEnable: boolean): void;
    endEdit(): void;
    excelExport(excelExportProperties?: Object, isMultipleExport?: boolean, workbook?: Object, isBlob?: boolean): Object;
    extendRequiredModules(modules: Object[]): void;
    filterByColumn(fieldName: string, filterOperator: string, filterValue: string | number | Object | boolean | number[] | string[] | Object[] | boolean[], predicate?: string, matchCase?: boolean, ignoreAccent?: boolean, actualFilterValue?: string, actualOperator?: string): void;
    getBatchChanges(): Object;
    getCellFromIndex(rowIndex: number, columnIndex: number): Object;
    getColumnByField(field: string): Object;
    getColumnByUid(uid: string): Object;
    getColumnFieldNames(): string[];
    getColumnHeaderByField(field: string): Object;
    getColumnHeaderByIndex(index: number): Object;
    getColumnHeaderByUid(uid: string): Object;
    getColumnIndexByField(field: string): number;
    getColumnIndexByUid(uid: string): number;
    getColumns(isRefresh?: boolean): Object[];
    getContent(): Object;
    getContentTable(): Object;
    getCurrentViewRecords(): Object[];
    getDataModule(): Object;
    getDataRows(): Object[];
    getFilterUIInfo(): Object;
    getFilteredRecords(): Object[] | Object;
    getFooterContent(): Object;
    getFooterContentTable(): Object;
    getForeignKeyColumns(): Object[];
    getFrozenDataRows(): Object[];
    getFrozenLeftColumnHeaderByIndex(index: number): Object;
    getFrozenLeftCount(): number;
    getFrozenMode(): Object;
    getFrozenRightCellFromIndex(rowIndex: number, columnIndex: number): Object;
    getFrozenRightColumnHeaderByIndex(index: number): Object;
    getFrozenRightDataRows(): Object[];
    getFrozenRightRowByIndex(index: number): Object;
    getFrozenRightRows(): Object[];
    getFrozenRowByIndex(index: number): Object;
    getHeaderContent(): Object;
    getHeaderTable(): Object;
    getHiddenColumns(): Object[];
    getMediaColumns(): void;
    getMovableCellFromIndex(rowIndex: number, columnIndex: number): Object;
    getMovableColumnHeaderByIndex(index: number): Object;
    getMovableDataRows(): Object[];
    getMovableRowByIndex(index: number): Object;
    getMovableRows(): Object[];
    getPager(): Object;
    getPrimaryKeyFieldNames(): string[];
    getRowByIndex(index: number): Object;
    getRowIndexByPrimaryKey(value: string | Object): number;
    getRowInfo(target: Object | Object): Object;
    getRows(): Object[];
    getSelectedColumnsUid(): string[];
    getSelectedRecords(): Object[];
    getSelectedRowCellIndexes(): Object[];
    getSelectedRowIndexes(): number[];
    getSelectedRows(): Object[];
    getSummaryValues(summaryCol: Object, summaryData: Object): number;
    getUidByColumnField(field: string): string;
    getVisibleColumns(): Object[];
    goToPage(pageNo: number): void;
    groupCollapseAll(): void;
    groupColumn(columnName: string): void;
    groupExpandAll(): void;
    hideColumns(keys: string | string[], hideBy?: string): void;
    hideScroll(): void;
    hideSpinner(): void;
    isFrozenGrid(): boolean;
    openColumnChooser(x?: number, y?: number): void;
    pdfExport(pdfExportProperties?: Object, isMultipleExport?: boolean, pdfDoc?: Object, isBlob?: boolean): Object;
    print(): void;
    refresh(): void;
    refreshColumns(): void;
    refreshHeader(): void;
    reorderColumnByIndex(fromIndex: number, toIndex: number): void;
    reorderColumnByTargetIndex(fieldName: string | string[], toIndex: number): void;
    reorderColumns(fromFName: string | string[], toFName: string): void;
    reorderRows(fromIndexes: number[], toIndex: number): void;
    saveCell(): void;
    search(searchString: string): void;
    selectCell(cellIndex: Object, isToggle?: boolean): void;
    selectCells(rowCellIndexes: Object[]): void;
    selectCellsByRange(startIndex: Object, endIndex?: Object): void;
    selectRow(index: number, isToggle?: boolean): void;
    selectRows(rowIndexes: number[]): void;
    selectRowsByRange(startIndex: number, endIndex?: number): void;
    serverCsvExport(url: string): void;
    serverExcelExport(url: string): void;
    serverPdfExport(url: string): void;
    setCellValue(key: string | number, field: string, value: string | number | boolean | Object): void;
    setGridContent(element: Object): void;
    setGridContentTable(element: Object): void;
    setGridHeaderContent(element: Object): void;
    setGridHeaderTable(element: Object): void;
    setGridPager(element: Object): void;
    setRowData(key: string | number, rowData?: Object): void;
    showAdaptiveFilterDialog(): void;
    showAdaptiveSortDialog(): void;
    showColumns(keys: string | string[], showBy?: string): void;
    showSpinner(): void;
    sortColumn(columnName: string, direction: Object, isMultiSort?: boolean): void;
    startEdit(): void;
    ungroupColumn(columnName: string): void;
    updateCell(rowIndex: number, field: string, value: string | number | boolean | Object): void;
    updateExternalMessage(message: string): void;
    updateRow(index: number, data: Object): void;
    updateRowValue(key: number, rowData: Object): void;
}
export declare const GridPlugin: {
    name: string;
    install(Vue: any): void;
};
