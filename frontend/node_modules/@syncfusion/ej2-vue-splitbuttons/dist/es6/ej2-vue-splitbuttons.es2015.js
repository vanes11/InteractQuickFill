import { DropDownButton, ProgressButton, SplitButton } from '@syncfusion/ej2-splitbuttons';
import { ComponentBase, EJComponentDecorator, allVue, getProps, gh } from '@syncfusion/ej2-vue-base';
import { Vue } from 'vue-class-component';
import Vue$1 from 'vue';
import { isNullOrUndefined } from '@syncfusion/ej2-base';

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const isExecute = gh ? false : true;
let vueImport;
if (!isExecute || parseInt(allVue.version) < 3) {
    vueImport = Vue;
}
else {
    vueImport = Vue$1;
}
let DropDownButtonItemsDirective = class DropDownButtonItemsDirective extends vueImport {
    render() {
        return;
    }
    getTag() {
        return 'e-dropdownbuttonitems';
    }
};
DropDownButtonItemsDirective = __decorate([
    EJComponentDecorator({}, isExecute)
], DropDownButtonItemsDirective);
const DropDownButtonItemsPlugin = {
    name: 'e-dropdownbuttonitems',
    install(Vue$$1) {
        Vue$$1.component(DropDownButtonItemsPlugin.name, DropDownButtonItemsDirective);
    }
};
let DropDownButtonItemDirective = class DropDownButtonItemDirective extends vueImport {
    render() {
        return;
    }
    getTag() {
        return 'e-dropdownbuttonitem';
    }
};
DropDownButtonItemDirective = __decorate([
    EJComponentDecorator({}, isExecute)
], DropDownButtonItemDirective);
const DropDownButtonItemPlugin = {
    name: 'e-dropdownbuttonitem',
    install(Vue$$1) {
        Vue$$1.component(DropDownButtonItemPlugin.name, DropDownButtonItemDirective);
    }
};

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// {{VueImport}}
const properties = ['content', 'createPopupOnClick', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'iconCss', 'iconPosition', 'items', 'locale', 'target', 'beforeClose', 'beforeItemRender', 'beforeOpen', 'close', 'created', 'open', 'select'];
const modelProps = [];
const testProp = getProps({ props: properties });
const props = testProp[0];
const watch = testProp[1];
const emitProbs = Object.keys(watch);
emitProbs.push('modelchanged');
for (let props of modelProps) {
    emitProbs.push('update:' + props);
}
const isExecute$1 = gh ? false : true;

/**
 * Represents the Essential JS 2 VueJS DropDownButton Component
 * ```html
 * <ejs-dropdownbutton>DropDownButton</ejs-dropdownbutton>
 * ```
 */
let DropDownButtonComponent = 
/* Start Options({
    props: props,
    watch: watch,
    emits: emitProbs
}) End */
class DropDownButtonComponent extends ComponentBase {
    constructor() {
        super(arguments);
        this.propKeys = properties;
        this.models = modelProps;
        this.hasChildDirective = true;
        this.hasInjectedModules = false;
        this.tagMapper = { "e-dropdownbuttonitems": "e-dropdownbuttonitem" };
        this.tagNameMapper = { "e-dropdownbuttonitems": "e-items" };
        this.isVue3 = !isExecute$1;
        this.ej2Instances = new DropDownButton({});
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
        
    }
    setProperties(prop, muteOnChange) {
        if (this.isVue3) {
            this.models = !this.models ? this.ej2Instances.referModels : this.models;
        }
        if (this.ej2Instances && this.ej2Instances._setProperties) {
            this.ej2Instances._setProperties(prop, muteOnChange);
        }
        if (prop && this.models && this.models.length) {
            Object.keys(prop).map((key) => {
                this.models.map((model) => {
                    if ((key === model) && !(/datasource/i.test(key))) {
                        if (this.isVue3) {
                            this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);
                        }
                        else {
                            this.$emit('update:' + key, prop[key]);
                        }
                    }
                });
            });
        }
    }
    render(createElement) {
        let h = gh || createElement;
        let slots = null;
        if (!isNullOrUndefined(this.$slots.default)) {
            slots = gh ? this.$slots.default() : this.$slots.default;
        }
        return h('button', slots);
    }
    addItems(items, text) {
        return this.ej2Instances.addItems(items, text);
    }
    focusIn() {
        return this.ej2Instances.focusIn();
    }
    removeItems(items, isUniqueId) {
        return this.ej2Instances.removeItems(items, isUniqueId);
    }
    toggle() {
        return this.ej2Instances.toggle();
    }
};
DropDownButtonComponent = __decorate$1([
    EJComponentDecorator({
        props: properties
    }, isExecute$1)
    /* Start Options({
        props: props,
        watch: watch,
        emits: emitProbs
    }) End */
], DropDownButtonComponent);
const DropDownButtonPlugin = {
    name: 'ejs-dropdownbutton',
    install(Vue$$1) {
        Vue$$1.component(DropDownButtonPlugin.name, DropDownButtonComponent);
        Vue$$1.component(DropDownButtonItemPlugin.name, DropDownButtonItemDirective);
        Vue$$1.component(DropDownButtonItemsPlugin.name, DropDownButtonItemsDirective);
    }
};

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const isExecute$2 = gh ? false : true;
let vueImport$1;
if (!isExecute$2 || parseInt(allVue.version) < 3) {
    vueImport$1 = Vue;
}
else {
    vueImport$1 = Vue$1;
}
let SplitButtonItemsDirective = class SplitButtonItemsDirective extends vueImport$1 {
    render() {
        return;
    }
    getTag() {
        return 'e-splitbuttonitems';
    }
};
SplitButtonItemsDirective = __decorate$2([
    EJComponentDecorator({}, isExecute$2)
], SplitButtonItemsDirective);
const SplitButtonItemsPlugin = {
    name: 'e-splitbuttonitems',
    install(Vue$$1) {
        Vue$$1.component(SplitButtonItemsPlugin.name, SplitButtonItemsDirective);
    }
};
let SplitButtonItemDirective = class SplitButtonItemDirective extends vueImport$1 {
    render() {
        return;
    }
    getTag() {
        return 'e-splitbuttonitem';
    }
};
SplitButtonItemDirective = __decorate$2([
    EJComponentDecorator({}, isExecute$2)
], SplitButtonItemDirective);
const SplitButtonItemPlugin = {
    name: 'e-splitbuttonitem',
    install(Vue$$1) {
        Vue$$1.component(SplitButtonItemPlugin.name, SplitButtonItemDirective);
    }
};

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// {{VueImport}}
const properties$1 = ['content', 'createPopupOnClick', 'cssClass', 'disabled', 'enableHtmlSanitizer', 'enablePersistence', 'enableRtl', 'iconCss', 'iconPosition', 'items', 'locale', 'target', 'beforeClose', 'beforeItemRender', 'beforeOpen', 'click', 'close', 'created', 'open', 'select'];
const modelProps$1 = [];
const testProp$1 = getProps({ props: properties$1 });
const props$1 = testProp$1[0];
const watch$1 = testProp$1[1];
const emitProbs$1 = Object.keys(watch$1);
emitProbs$1.push('modelchanged');
for (let props of modelProps$1) {
    emitProbs$1.push('update:' + props);
}
const isExecute$3 = gh ? false : true;

/**
 * Represents the Essential JS 2 VueJS SplitButton Component
 * ```html
 * <ejs-splitbutton content='Split Button'></ejs-splitbutton>
 * ```
 */
let SplitButtonComponent = 
/* Start Options({
    props: props,
    watch: watch,
    emits: emitProbs
}) End */
class SplitButtonComponent extends ComponentBase {
    constructor() {
        super(arguments);
        this.propKeys = properties$1;
        this.models = modelProps$1;
        this.hasChildDirective = true;
        this.hasInjectedModules = false;
        this.tagMapper = { "e-splitbuttonitems": "e-splitbuttonitem" };
        this.tagNameMapper = { "e-splitbuttonitems": "e-items" };
        this.isVue3 = !isExecute$3;
        this.ej2Instances = new SplitButton({});
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
        
    }
    setProperties(prop, muteOnChange) {
        if (this.isVue3) {
            this.models = !this.models ? this.ej2Instances.referModels : this.models;
        }
        if (this.ej2Instances && this.ej2Instances._setProperties) {
            this.ej2Instances._setProperties(prop, muteOnChange);
        }
        if (prop && this.models && this.models.length) {
            Object.keys(prop).map((key) => {
                this.models.map((model) => {
                    if ((key === model) && !(/datasource/i.test(key))) {
                        if (this.isVue3) {
                            this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);
                        }
                        else {
                            this.$emit('update:' + key, prop[key]);
                        }
                    }
                });
            });
        }
    }
    render(createElement) {
        let h = gh || createElement;
        let slots = null;
        if (!isNullOrUndefined(this.$slots.default)) {
            slots = gh ? this.$slots.default() : this.$slots.default;
        }
        return h('button', slots);
    }
    addItems(items, text) {
        return this.ej2Instances.addItems(items, text);
    }
    focusIn() {
        return this.ej2Instances.focusIn();
    }
    removeItems(items, isUniqueId) {
        return this.ej2Instances.removeItems(items, isUniqueId);
    }
    toggle() {
        return this.ej2Instances.toggle();
    }
};
SplitButtonComponent = __decorate$3([
    EJComponentDecorator({
        props: properties$1
    }, isExecute$3)
    /* Start Options({
        props: props,
        watch: watch,
        emits: emitProbs
    }) End */
], SplitButtonComponent);
const SplitButtonPlugin = {
    name: 'ejs-splitbutton',
    install(Vue$$1) {
        Vue$$1.component(SplitButtonPlugin.name, SplitButtonComponent);
        Vue$$1.component(SplitButtonItemPlugin.name, SplitButtonItemDirective);
        Vue$$1.component(SplitButtonItemsPlugin.name, SplitButtonItemsDirective);
    }
};

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// {{VueImport}}
const properties$2 = ['animationSettings', 'content', 'cssClass', 'disabled', 'duration', 'enableHtmlSanitizer', 'enableProgress', 'iconCss', 'iconPosition', 'isPrimary', 'isToggle', 'spinSettings', 'begin', 'created', 'end', 'fail', 'progress'];
const modelProps$2 = [];
const testProp$2 = getProps({ props: properties$2 });
const props$2 = testProp$2[0];
const watch$2 = testProp$2[1];
const emitProbs$2 = Object.keys(watch$2);
emitProbs$2.push('modelchanged');
for (let props of modelProps$2) {
    emitProbs$2.push('update:' + props);
}
const isExecute$4 = gh ? false : true;

/**
 * Represents the Essential JS 2 VueJS ProgressButton Component
 * ```html
 * <ejs-progressbutton content='Progress Button'></ejs-progressbutton>
 * ```
 */
let ProgressButtonComponent = 
/* Start Options({
    props: props,
    watch: watch,
    emits: emitProbs
}) End */
class ProgressButtonComponent extends ComponentBase {
    constructor() {
        super(arguments);
        this.propKeys = properties$2;
        this.models = modelProps$2;
        this.hasChildDirective = false;
        this.hasInjectedModules = false;
        this.tagMapper = {};
        this.tagNameMapper = {};
        this.isVue3 = !isExecute$4;
        this.ej2Instances = new ProgressButton({});
        this.bindProperties();
        this.ej2Instances._setProperties = this.ej2Instances.setProperties;
        this.ej2Instances.setProperties = this.setProperties;
        
    }
    setProperties(prop, muteOnChange) {
        if (this.isVue3) {
            this.models = !this.models ? this.ej2Instances.referModels : this.models;
        }
        if (this.ej2Instances && this.ej2Instances._setProperties) {
            this.ej2Instances._setProperties(prop, muteOnChange);
        }
        if (prop && this.models && this.models.length) {
            Object.keys(prop).map((key) => {
                this.models.map((model) => {
                    if ((key === model) && !(/datasource/i.test(key))) {
                        if (this.isVue3) {
                            this.ej2Instances.vueInstance.$emit('update:' + key, prop[key]);
                        }
                        else {
                            this.$emit('update:' + key, prop[key]);
                        }
                    }
                });
            });
        }
    }
    render(createElement) {
        let h = gh || createElement;
        let slots = null;
        if (!isNullOrUndefined(this.$slots.default)) {
            slots = gh ? this.$slots.default() : this.$slots.default;
        }
        return h('button', slots);
    }
    click() {
        return this.ej2Instances.click();
    }
    focusIn() {
        return this.ej2Instances.focusIn();
    }
    progressComplete() {
        return this.ej2Instances.progressComplete();
    }
    start(percent) {
        return this.ej2Instances.start(percent);
    }
    stop() {
        return this.ej2Instances.stop();
    }
};
ProgressButtonComponent = __decorate$4([
    EJComponentDecorator({
        props: properties$2
    }, isExecute$4)
    /* Start Options({
        props: props,
        watch: watch,
        emits: emitProbs
    }) End */
], ProgressButtonComponent);
const ProgressButtonPlugin = {
    name: 'ejs-progressbutton',
    install(Vue$$1) {
        Vue$$1.component(ProgressButtonPlugin.name, ProgressButtonComponent);
    }
};

export { DropDownButtonItemsDirective, DropDownButtonItemDirective, DropDownButtonItemsPlugin, DropDownButtonItemPlugin, DropDownButtonComponent, DropDownButtonPlugin, SplitButtonItemsDirective, SplitButtonItemDirective, SplitButtonItemsPlugin, SplitButtonItemPlugin, SplitButtonComponent, SplitButtonPlugin, ProgressButtonComponent, ProgressButtonPlugin };
export * from '@syncfusion/ej2-splitbuttons';
//# sourceMappingURL=ej2-vue-splitbuttons.es2015.js.map
